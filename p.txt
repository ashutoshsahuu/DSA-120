
Rotate the array returns back

Description

You are given an array of n elements and an integer k, you need to rotate the array by k units.



Input Description

First-line contains t, which is the number of test cases

For each test cases, first-line has n & k - the number of elements in the array and the number of times the array has to be rotated

The second line of each test case contains n numbers which represent the elements of the array

Constraints

1<=T<=20

1<=N<=50000, 0<=K<=1000000000

1 <= Ai <= 1000000


Output Description

out put N elements, elements of the array , rotated by K units



Sample Input 1

Copy

3
2 1
1 2
2 2
1 2
3 1
1 2 3
Output
2 1
1 2
3 1 2

code:
def rotateArray(arr , k , n):
  k = k % n
  return arr[-k:] + arr[:-k]
  

tc = int(input())
for _ in range(tc):
  n , k = map(int , input().split())
  arr = list(map(int , input().split()))
  res = rotateArray(arr , k , n)
  print(*res)



*************************************************************************
Spiral Traversal (Rectangular Matrix)

Description

You are given a matrix of size N x M.

Print the spiral traversal of the matrix.

Refer the image given below, for better understanding.

Screenshot (116).png

Input Description

The first line of the input contains T, the number of test cases.

The first line of each test case contains N and M, the number of rows and columns in the given matrix.

The next N lines contain M values each denoting the elements of the matrix.

Constraints

1 <= T <= 10

1 <= N, M <= 200

1 <= A[i][j] <= 200

Output Description

For each test case, print the spiral traversal of the matrix, on a single line, on a new line.

Input :
2
3 4
1 2 3 4
5 6 7 8
9 10 11 12
4 3
1 2 3
4 5 6
7 8 9
10 11 12

Output:
1 5 9 10 11 12 8 4 3 2 6 7 
1 4 7 10 11 12 9 6 3 2 5 8 

Code :

def vertical_spiral_traversal(mat, n, m):
    ans = []
    l, r, t, b = 0, m - 1, 0, n - 1

    while l <= r and t <= b:
  
      for i in range(t, b + 1):
        ans.append(mat[i][l])
      l += 1

      if t <= b:
        for i in range(l, r + 1):
          ans.append(mat[b][i])
        b -= 1

      if l <= r:
        for i in range(b, t - 1, -1):
          ans.append(mat[i][r])
        r -= 1

      if t <= b:
        for i in range(r, l - 1, -1):
          ans.append(mat[t][i])
        t += 1

    return ans

t = int(input())
for _ in range(t):
    n, m = map(int, input().split())
    mat = [list(map(int, input().split())) for _ in range(n)]
    res = vertical_spiral_traversal(mat, n, m)
    print(*res)


*************************************************************************
Maximum Product Subarray

Description

Given an array A of size n of positive and negative integers, find a subarray (containing at least one number) with the maximum product.


Input Description

The first line of the input contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.

The first line of each test case contains a single integer n (1 ≤ n ≤ 100000).

The second line of the test case contains n integers (-100 ≤ Ai ≤ 100).


Output Description

For each test case, print the answer: The maximum product possible.

input
2
3
-3 0 -2
4
4 5 -1 2
Output
0
20

code:

def maxProductSubarray(arr , n):
  maxi = arr[0]
  currMax = arr[0]
  currMin = arr[0]
  
  for i in range(1 , n):
    if arr[i] < 0:
      currMax , currMin = currMin , currMax
    
    currMax = max(arr[i] , currMax*arr[i])
    currMin = min(arr[i] , currMin*arr[i])
    
    maxi = max(maxi , currMax)
  
  return maxi


tc = int(input())
for _ in range(tc):
  n = int(input())
  arr = list(map(int , input().split()))
  res = maxProductSubarray(arr , n)
  print(res)


*************************************************************************
Sum of subarray II

Description

You are given an array of N integers and a single integer K. You need to find out if there is a subarray, which has the sum exactly as K.


Input Description

Input Format

First-line contains T, no of test cases.

First-line of each test case contains N, the size of the array, and K.

Second-lineof each test casecontains N spaced integers, elements of an array.

Constraints

1 <= T <= 10

1 <= N <= 10^5

1 <= A[i] <= 10^12

1 <= K <= 10^12


Output Description

For each test case print "Yes", if there exists a subarray with sum K or else print "No".


Sample Input 1

Copy
3
5 3
1 2 1 3 4
4 5
1 2 1 3
3 2
1 2 1

Output:
Yes
No
Yes

code :

def checkSubarraySum(arr, n, k):
    prefixSum = 0
    prefixSums = set()
    prefixSums.add(0)

    for num in arr:
        prefixSum += num

        if (prefixSum - k) in prefixSums:
            return "Yes"
        
        prefixSums.add(prefixSum)
    
    return "No"

t = int(input())
for _ in range(t):
    n, k = map(int, input().split())
    arr = list(map(int, input().split()))
    res = checkSubarraySum(arr, n, k)
    print(res)



*************************************************************************

Maximum Sum Subarray(Kadane's Algo)

Description

You are give an array of integers of size N. You need to find and print maximum sum of contiguous sub array (containing atleast one integer) from this array.


Input Description

First line contains T, no of test cases.

First line of each test case contains N, size of array.

Second line of each test case contains N spaced integers.

Constraints

1 <= T <= 10

1 <= N <= 10^6

-10^6 <= A[i] <= 10^6


Output Description

For each test case print the maximum sum of contiguous array, on new line


Sample Input 1

Copy

2
5
1 2 0 4 5
5
3 -4 1 2 -1
Output
12
3

code :

def MaxSumSubarray(arr , n):
  cMax = arr[0]
  maxi = arr[0]
  
  for i in range(1 , n):
    cMax = max(arr[i] , cMax + arr[i])
    maxi = max(maxi , cMax)
  
  return maxi


tc = int(input())
for _ in range(tc):
  n = int(input())
  arr = list(map(int , input().split()))
  res = MaxSumSubarray(arr , n)
  print(res)
